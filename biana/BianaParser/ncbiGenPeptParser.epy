
from Bio import Fasta  # needed to read the genpept file (which is in fasta format)

from bianaParser import *


class NcbiGenPeptParserGenpeptParser(BianaParser):
    """
    Genpept Parser class
    """

    name = "NCBI_Genpept"
    description = "Inserts NCBI Genpet database into BIANA"
    external_entity_definition = "A external entity represents a protein"
    external_entity_relations = ""

    def __init__(self):

        # Start with the default values

        BianaParser.__init__(self, default_db_description = "NCBI genbank",
                             default_script_name = "ncbiGenPeptParser.py",
                             default_script_description = NcbiGenPeptParserGenpeptParser.description,
                             additional_optional_arguments = [])
        self.initialize_input_file_descriptor()


    def parse_database(self):

        # Define the parser information to print in the help:

        # STEP 3: THE PARSER ITSELF. IT MUST USE THE METHODS OF PianaDBaccess

        # All these tags will be considered to be pointing to id type Accession
        accepted_coll_accessions = { "gb": None,
                                     "dbj": None,
                                     "emb": None}

        num_seqs_tax_not_known = 0

        
        self.initialize_input_file_descriptor()


        genpept_parser = Fasta.RecordParser()
        genpept_input_file = self.input_file_fd
        genpept_iterator = Fasta.Iterator(genpept_input_file, genpept_parser)

        genpept_record = genpept_iterator.next()

        protein_number=0

        if self.verbose:
            sys.stderr.write("Loading taxonomies\n")

        dict_name_tax = self.biana_access.get_taxonomy_names_taxID_dict()

	#print dict_name_tax

	#raise ValueError("test")

        if( len(dict_name_tax) == 0 ):
            raise ValueError("Taxonomies have not been inserted. You must previously insert information about taxonomy")

        if self.verbose:
            sys.stderr.write( "Processing file\n")

        
        # while record read is not None, parse the record and insert data into biana
        while genpept_record is not None:


            genpept_object = ExternalEntity( source_database = self.database, type="protein" )

            protein_number += 1

            self.add_to_log("Number of proteins processed")

            if self.verbose:
                sys.stderr.write( "===================================\n")
                sys.stderr.write( "            NEW ENTRY\n")
                sys.stderr.write( "===================================\n")


            if self.time_control:
                if protein_number%20000==0:
                    sys.stderr.write("%s proteins done in %s seconds\n" %(protein_number,time.time()-self.initial_time))

            protein_title_line = genpept_record.title
            protein_sequence = genpept_record.sequence.strip()
            
            if protein_sequence:
                genpept_object.add_attribute( ExternalEntityAttribute( attribute_identifier = "proteinsequence", 
                                                                       value = ProteinSequence(protein_sequence)) )

            if self.verbose:
                #sys.stderr.write("record is : %s\n" %(genpept_record))
                sys.stderr.write("title line is : %s\n" %(protein_title_line)) 
                #sys.stderr.write("sequence is : %s\n" %(protein_sequence))

            # title looks like this: gi|gi_id|sourceDB|acc| protein name [species]
            #                        - gi|4105707|gb|AAD02507.1| carbamate kinase [Trichomonas vaginalis]
            #                        - gi|4105707|gb|AAD02507.1| carbamate kinase [Trichomonas vaginalis]
            #                        - gi|4105707|gb|AAD02507.1| carbamate kinase
            #                        - gi|4105707|dbj|BBAS02507.1| carbamate kinase 4243
            #                        
            #    (character '>' from input file has been removed)

            title_atoms = protein_title_line.split('|')

            gi_id = int(title_atoms[1])

            accessionNum = None
            accessionVersion = None
            
            if accepted_coll_accessions.has_key(title_atoms[2]):
                # we consider accessions from sources in accepted_coll_accessions
                coll_acc = title_atoms[3].strip()

                # Split Accession Number and Version
                try:
                    splited = re.split("\.",coll_acc)
                    accessionNum = splited[0]
                    accessionVersion = splited[1]
                except:
                    accessionNum = coll_acc

            temp = []
            for x in xrange(4,len(title_atoms)):
                temp.append(title_atoms[x])
            temp_protein_name = "".join(temp)


            # Process species name...

            starts = []
            ends = []

            for x in xrange(len(temp_protein_name)):
                if temp_protein_name[x]=='[':
                    starts.append(x)
                elif temp_protein_name[x]==']':
                    ends.append(x)

            starts.reverse()
            ends.reverse()

            try:
                limit = starts[0]

                for x in xrange(1,len(ends)):
                    if ends[x]>starts[x-1]:
                        limit = starts[x]
                        continue
                    limit = starts[x-1]
                    break


                species_name = temp_protein_name[limit+1:-1]

                try:
                
                    tax_id_value = dict_name_tax[species_name.lower()]
                    genpept_object.add_attribute( ExternalEntityAttribute( attribute_identifier = "taxID",
                                                                       value = tax_id_value ))
                except:
                    # If not found, try to split by "," or by "="
                    try:
                        tax_id_value = dict_name_tax[species_name.split(",")[0].lower()]
                        genpept_object.add_attribute( ExternalEntityAttribute( attribute_identifier = "taxID",
                                                                               value = tax_id_value ))
                    except:

                        try:
                            tax_id_value = dict_name_tax[species_name.split("=")[0].lower()]
                            genpept_object.add_attribute( ExternalEntityAttribute( attribute_identifier = "taxID",
                                                                                   value = tax_id_value ))
                        
                        except:
                            if self.verbose:
                                sys.stderr.write("%s not found\n" %(species_name))


                genpept_object.add_attribute( ExternalEntityAttribute(attribute_identifier = "description", 
                                                                      value = temp_protein_name[:limit].strip() ) )

                self.add_to_log("Number of protein descriptions inserted")

            except:
                genpept_object.add_attribute( ExternalEntityAttribute(attribute_identifier = "description", 
                                                                      value = temp_protein_name.strip() ) )
                self.add_to_log("Number of protein descriptions inserted")


            """
            Now, we have a proteinPiana for the (sequence, tax_id), either the one already existing before or a new one.

            Just add protein information to database tables.

            TO DO!! this would be a good place to check for consistency between uniprot and genbank, using embl accessions
            """

            if gi_id:
                genpept_object.add_attribute( ExternalEntityAttribute( attribute_identifier = "gi", 
                                                                       value = gi_id,
                                                                       type = "unique" ) )
                self.add_to_log("Number of gi codes inserted")

            if accessionNum != "":
                if accessionVersion is None:
                    genpept_object.add_attribute( ExternalEntityAttribute(attribute_identifier = "accessionNumber",
                                                                          value = accessionNum,
                                                                          type = "unique" ) )
                else:
                    genpept_object.add_attribute( ExternalEntityAttribute(attribute_identifier = "accessionNumber",
                                                                          value = accessionNum,
                                                                          version = accessionVersion,
                                                                          type = "unique"))
                self.add_to_log("Number of accessionNumber inserted")



            # reading next record
            if self.verbose:
                sys.stderr.write( "reading next record\n")


            self.biana_access.insert_new_external_entity( externalEntity = genpept_object )

            genpept_record = genpept_iterator.next()

        # END OF while genpept_record is not None
